import React from "react";
import "./chatsHistoryContent.scss";

// Підключаємо компоненти
import { ChatPeriodBlock } from "./ChatPeriodBlock/ChatPeriodBlock.jsx"

export const ChatsHistoryContent = () => {

	/* 
		Получаем массив с историей чатов. Сортируем по дате:
		 - За сегодня
		 - За вчера
		 - В этом месяце
		 - По месяцам (кроме текущего)
		 - По годам (без деления на месяцы)

		 После этого выводим блоки списком. Каждый блок - это компонент ChatPeriodBlock

		 В блок передаем следующие пропсы: Период, Массив с чатами
	*/

	/*
	В массиве передаются чаты c корокой информацией и id для получения полного чата

	В идеале чаты должны передаваться по 50 штук. То есть по дефолту загружаются последние 50. Когда пользователь
	скроллит вниз истории чатов, то делается запрос и подгружаются следующие 50

	В таком случае чаты должны сортироваться на бэке по дате. А я уже буду определять, что это за последние 7 дней,
	или за вчера, или за последний месяц.

	Такой вариант позволяет избежать ситуации, когда у человека будет 500 чатов через год,
	и его админка будет грузиться очень долго
	*/

	const chatsData = [
		{ 
			create_at: "22.05.2024",
			title: "Заголовок чату 2",
			chat_id: 2,
		},
		{ 
			create_at: "21.05.2024",
			title: "Заголовок чату 1",
			chat_id: 1,
		}
	]

	/* 
		Сортируем чаты по периодам и возвращаем обьект с массивами. Каждый массив соответствует периоду.
		В каждом массиве (периоде) располагаются чаты в виде отдельных обьектов
	*/
	const sortChatsByPeriod = (chatsData) => {
		return sortedData
	}

	return (
		<div className="chats-history-content">
			<ul className="chats-history-content__list">
				{/* Здесь сортиуем массив и выводим элементы списком (для примера указаны статически) */}
				<li className="chats-history-content__list-item">
					<ChatPeriodBlock period={"Сьогодні"} chatsData={chatsData}/>
				</li>
			</ul>
		</div>
	)
}